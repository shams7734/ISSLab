#include<bits/stdc++.h>
using namespace std;
int main()
{
	
	int i,j,k,len,l;
	char text[20]="Hello World";
    string buffer[20];
			   	  
	int key[64]={	0, 0, 1, 1, 0, 1, 0, 0,
					0, 0, 1, 0, 1, 1, 0, 1,
					1, 0, 1, 1, 0, 1, 0, 1,
					1, 0, 1, 0, 1, 0, 0, 0,
					0, 0, 0, 1, 1, 1, 0, 1,
					1, 1, 0, 1, 1, 0, 1, 1,
					1, 0, 0, 1, 0, 0, 0, 0,
					0, 0, 0, 0, 0, 1, 0, 0
				};
				
	int pc1[64]={	58, 50, 42, 34, 26, 18, 10, 2,
					60, 52, 44, 36, 28, 20, 12, 4,
					62, 54, 46, 38, 30, 22, 14, 6,
					64, 56, 48, 40, 32, 24, 16, 8,
					57, 49, 41, 33, 25, 17, 9, 1,
					59, 51, 43, 35, 27, 19, 11, 3, 
					61, 53, 45, 37, 29, 21, 13, 5,
					63, 55, 47, 39, 31, 23, 15, 7
				};
				
	int pc2[48]={	14, 17, 11, 24,  1,  5,
					3, 28, 15,  6, 21, 10,
					23, 19, 12,  4, 26,  8,
					16,  7, 27, 20, 13,  2,
					41, 52, 31, 37, 47, 55,
					30, 40, 51, 45, 33, 48,
					44, 49, 39, 56, 34, 53,
					46, 42, 50, 36, 29, 32
				};
				
	int exp[48]={ 32, 1, 2, 3, 4, 5,
                  4, 5, 6, 7, 8, 9,
                  8, 9, 10, 11, 12, 13,
                 12, 13, 14, 15, 16, 17,
                 16, 17, 18, 19, 20, 21,
                 20, 21, 22, 23, 24, 25,
                 24, 25, 26, 27, 28, 29,
                 28, 29, 30, 31, 32,  1
				};
				
	int sbox[8][4][16]=
            {
                {
                    14, 04, 13, 01, 02, 15, 11, 8, 03, 10, 06, 12, 05, 9, 00, 07,
                    00, 15, 07, 04, 14, 02, 13, 10, 03, 06, 12, 11, 9, 05, 03, 8,
                    04, 01, 14, 8, 13, 06, 02, 11, 15, 12, 9, 07, 03, 10, 05, 00,
                    15, 12, 8, 02, 04, 9, 01, 07, 05, 11, 03, 14, 10, 00, 06, 13
                },
                {
                    15,01,8,14,06,11,03,04,9,07,02,13,12,00,05,10,
                    03,13,04,07,15,02,8,14,12,00,01,10,06,9,11,05,
                    00,14,07,11,10,04,13,01,05,8,12,06,9,03,02,15,
                    13,8,10,01,03,15,04,02,11,06,07,12,00,05,14,9
                },
                {
                    10,00,9,14,06,03,15,05,01,13,12,07,11,04,02,8,
                    13,07,00,9,03,04,06,10,02,8,05,14,12,11,15,01,
                    13,06,04,9,8,15,03,00,11,01,02,12,05,10,14,07,
                    01,10,13,00,06,9,8,07,04,15,14,03,11,05,02,12
                },
                {
                    07,13,14,03,00,6,9,10,1,02,8,05,11,12,04,15,
                    13,8,11,05,06,15,00,03,04,07,02,12,01,10,14,9,
                    10,06,9,00,12,11,07,13,15,01,03,14,05,02,8,04,
                    03,15,00,06,10,01,13,8,9,04,05,11,12,07,02,14
                },
                {
                    02,12,04,01,07,10,11,06,8,05,03,15,13,00,14,9,
                    14,11,02,12,04,07,13,01,05,00,15,10,03,9,8,06,
                    04,02,01,11,10,13,07,8,15,9,12,05,06,03,00,14,
                    11,8,12,07,01,14,02,13,06,15,00,9,10,04,05,03
                },
                {
                    12,01,10,15,9,02,06,8,00,13,03,04,14,07,05,11,
                    10,15,04,02,07,12,9,05,06,01,13,14,00,11,03,8,
                    9,14,15,05,02,8,12,03,07,00,04,10,01,13,11,06,
                    04,03,02,12,9,05,15,10,11,14,01,07,10,00,8,13
                },
                {
                    4,11,2,14,15,00,8,13,03,12,9,07,05,10,06,01,
                    13,00,11,07,04,9,01,10,14,03,05,12,02,15,8,06,
                    01,04,11,13,12,03,07,14,10,15,06,8,00,05,9,02,
                    06,11,13,8,01,04,10,07,9,05,00,15,14,02,03,12
                },
                {
                    13,02,8,04,06,15,11,01,10,9,03,14,05,00,12,07,
                    01,15,13,8,10,03,07,04,12,05,06,11,10,14,9,02,
                    07,11,04,01,9,12,14,02,00,06,10,10,15,03,05,8,
                    02,01,14,07,04,10,8,13,15,12,9,9,03,05,06,11
                }
            };
	
	int pbox_perm[32]={16,7,20,21,29,12,28,17,
					   1,15,23,26,5,18,31,10,
					   2,8,24,14,32,27,3,9,
					   19,13,30,6,22,11,4,25
					  };
					  
	int fin_perm[64]={40, 8, 48, 16, 56, 24, 64, 32,
					  39, 7, 47, 15, 55, 23, 63, 31,
					  38, 6, 46, 14, 54, 22, 62, 30,
					  37, 5, 45, 13, 53, 21, 61, 29,
					  36, 4, 44, 12, 52, 20, 60, 28,
					  35, 3, 43, 11, 51, 19, 59, 27,
					  34, 2, 42, 10, 50, 18, 58, 26, 
					  33, 1, 41, 9, 49, 17, 57, 25
					 };
	
				
	int key1[56],pc2_key[48],exp_rpt[48],sbox_input[48],sbox_output[32],pbox_output[32],final_swap[32];
	
	//Binary Conversion
	len=strlen(text);
	int asci[len];
	for(i=0;i<len;i++)
	{
		asci[i]=text[i];
	}
	for(i=0;i<len;i++)
	{
		ostringstream oss;
		oss<<bitset<8>(asci[i]);
		buffer[i]=oss.str();
		cout<<"binary "<<buffer[i]<<endl;	
	}
	
	int c[28];
	for(i=0;i<28;i++)
	{
		k=pc1[i];
		//printf("%d\t",k);
		c[i]=key[k-1];
		//printf("%d\n",c[i]);
	}
	
	int d[28];j=0;
	for(i=28;i<56;i++)
	{
		k=pc1[i];
		//printf("%d\t",k);
		d[j]=key[k-1];
		//printf("%d\n",d[j]);
		j++;
	}
	
	
	//16 Rounds begins here
	
	int shift[16]={1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};

	char left_text[32],right_text[32];		
	
	for(l=0;l<16;l++)
	{
		for(j=0;j<28;j++)
		{ 
			c[j]=c[( (j-shift[i]+28)%28 )];
			//printf("%d\t",c[j]);
		}
		//printf("\n");
		for(k=0;k<28;k++)
		{
			d[k]=d[( (k-shift[i]+28)%28 )];
			//printf("%d\t",d[k]);
		}
		
		k=0;
		for(j=0;j<28;j++)
		{
			key1[k]=c[j];
			k++;
		}
		
		for(j=0;j<28;j++)
		{
			key1[k]=c[j];
			k++;
		}
		
		for(j=0;j<48;j++)
		{
			k=pc2[j];
			//printf("%d\t",k);
			pc2_key[j]=key1[k-1];
			//printf("%d\n",pc2_key[j]);
		}
		
		k=0;
		for(i=0;i<4;i++)
		{
			for(j=0;j<8;j++)
			{
				left_text[k]=buffer[i][j];
				//cout<<left_text[k]<<endl;
				k++;
			}
		}
		
		k=0;
		for(i=4;i<8;i++)
		{
			for(j=0;j<8;j++)
			{
				right_text[k]=buffer[i][j];
				//cout<<right_text[k]<<endl;
				k++;		
			}
		}
		
		k=0;
		//cout<<"exp rpt"<<endl;
		for(i=0;i<48;i++)
		{
			k=exp[i];
			exp_rpt[i]=right_text[k-1];
			//cout<<right_text[k-1]<<endl;
		}
		
		for(i=0;i<48;i++)
		{
			sbox_input[i]=(pc2_key[i])^(exp_rpt[i]);
		}
		
		// sbox portion
		
		int row,column,value;
		for(i=0;i<8;i++)
		{
			row=sbox_input[6*i+5]*pow(2,0) + sbox_input[6*i]*pow(2,1);
			column=sbox_input[6*i+4]*pow(2,0) + sbox_input[6*i+3]*pow(2,1) + sbox_input[6*i+2]*pow(2,2) + sbox_input[6*i+1]*pow(2,3);
			value=sbox[i][row][column];
			for(j=0;j<4;j++)
			{
				sbox_output[4*i+3-j]=value%2;
				value=value/2;
			}
		}
		
		for(i=0;i<32;i++)
		{
			k=pbox_perm[i];
			pbox_output[i]=sbox_output[k-1];	
		}
		
		for(i=0;i<32;i++)
		{
			final_swap[i]=(pbox_output[i])^(left_text[i]);
		}
		
		for(i=0;i<32;i++)
		{
			left_text[i]=right_text[i];
			right_text[i]=final_swap[i];	
		}
		
	}
  
	int cipher[64];
	for(i=0;i<32;i++)
	{
		cipher[i]=left_text[i];
		cipher[i+32]=right_text[i];
	}
	
	int fin_cipher[64];
	for(i=0;i<64;i++)
	{
		k=fin_perm[i];
		fin_cipher[i]=cipher[k-1];
	}	

	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
		{
			printf("%d ",fin_cipher[i*8+j]);
		}
		printf("\n");
	}
	
}
